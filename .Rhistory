log2(6)
log2(1)
1/6*log2(1/6)
-(1/6*log2(1/6))*6
-(2/6*log2(2/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6+1/6*log2(1/6))
-(2/6*log2(2/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6))
-(4/6*log2(4/6)+1/6*log2(1/6)+1/6*log2(1/6))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(MASS)
library(tidyr)
library(ggplot2)
library(ggridges)
library(scales)
library(plyr)
library(rstatix)
brunato.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
meta.info
results <- Reduce(merge, list(brunato.results, coltekin.results, semenuks.results,
sinnemaki.results, sozinova.results))
nrow(results) # i.e. number of different UD corpora
length(unique(results$language)) # i.e. number of different languages
unique(results$language) # output the language names
ncol(results)-2 # i.e. number of complexity measures
results$CR_inflection_accuracy <- 1-results$CR_inflection_accuracy
results.scaled <- cbind(results[1:2], scale(results[3:29]))
results.scaled <- results.scaled[ , -which(names(results.scaled) %in%
c("BV_avg_max_depth","BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl", "SI_zero_dl"))]
results.long <- gather(results.scaled, key = measure, value = value, BV_n_tokens:SBS_DER)
results.long <- results.long[complete.cases(results.long), ]
nrow(results.long)
results.long <- merge(results.long, meta.info[, 1:3], by = "measure")
results.morph <- results.long[results.long$domain == "morphology", ]
results.syntax <- results.long[results.long$domain == "syntax", ]
results.overall <- results.long
results.overall$domain <- rep("overall", times = nrow(results.long))
results.plot <- rbind(results.overall, results.long)
head(results.overall)
head(results.long)
density.plot <- ggplot(results.overall, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_shape = "o", point_size = 1,
size = 0.25, position = position_points_jitter(height = 0.1)) +
#geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
head(results.long)
head(results.morph)
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
head(meta.info)
?wilcox_effsize()
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
library(ggrepel)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
head(languages)
file.choose()
glotto <- read.csv("/home/chris/Desktop/languoid.csv")
head(glotto)
new <- merge(languages, glotto, by.x="isocodes", by.y="id")
head(new)
head(languages)
new <- merge(languages, glotto, by.x="glottocode", by.y="id")
head(new)
View(new)
head(glotto)
glotto.family <- glotto[1:2,]
head(glotto.family)
glotto.family <- glotto[,1:2]
head(glotto.family)
new <- merge(languages, glotto.family, by.x="glottocode", by.y="id")
head(glotto)
glotto.family.name <- cbind(glotto[,2], glotto[,4])
head(glotto.family.name)
glotto.family.name <- data.frame(glotto[,2], glotto[,4])
head(glotto.family.name)
colnames(glotto.family.name) <- c("family_id","name")
head(glotto.family.name)
new2 <- merge(new, glotto.family.name, by.x="family_id", by.y="family_id")
head(new2)
head(new)
head(glotto.family.name)
colnames(glotto.family.name) <- c("family_id","family_name")
new2 <- merge(new, glotto.family.name, by = "family_id")
head(new2)
head(new)
head(glotto)
glotto.family <- glotto[glotto$level == "family",]
head(glotto.family)
glotto.family <- data.frame(glotto.family[,2],glotto.family[,4])
head(glotto.family)
colnames(glotto.family) <- c("family_id","family_name")
head(glotto.family)
new2 <- merge(new, glotto.family, by = "family_id")
head(new2)
new
write.csv(new, file =""/home/chris/Desktop/languages_metaInfo.csv"")
write.csv(new, file ="/home/chris/Desktop/languages_metaInfo.csv", row.names = F)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
head(languages)
length(unique(languages$isocodes)) # number of languages according to iso: 79
length(unique(languages$glottocode)) # number of languages according to glottolog: 79
unique(languages$macroarea) # macroareas: 6
length(unique(languages$family_id))
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
library(ggrepel)
world <- map_data("world")
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
family.map
world <- map_data("world")
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
knitr::opts_chunk$set(echo = TRUE)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
library(ggrepel)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
head(languages)
View(languages)
View(languages)
install.packages("ggridges")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(MASS)
library(tidyr)
library(ggplot2)
library(ggridges)
library(scales)
library(plyr)
library(rstatix)
brunato.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
results <- Reduce(merge, list(brunato.results, coltekin.results, semenuks.results,
sinnemaki.results, sozinova.results))
nrow(results) # i.e. number of different UD corpora
length(unique(results$language)) # i.e. number of different languages
unique(results$language) # output the language names
ncol(results)-2 # i.e. number of complexity measures
results$CR_inflection_accuracy <- 1-results$CR_inflection_accuracy
results.scaled <- cbind(results[1:2], scale(results[3:29]))
results.scaled <- results.scaled[ , -which(names(results.scaled) %in%
c("BV_avg_max_depth","BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl", "SI_zero_dl"))]
nrow(results.scaled)
results.long <- gather(results.scaled, key = measure, value = value, BV_n_tokens:SBS_DER)
results.long <- results.long[complete.cases(results.long), ]
nrow(results.long)
results.long <- merge(results.long, meta.info[, 2:4], by = "measure")
results.morph <- results.long[results.long$domain == "morphology", ]
results.syntax <- results.long[results.long$domain == "syntax", ]
selection <- c("English")
results.long.selected <- results.long[results.long$language %in% selection, ]
results.overall <- results.long
results.overall$domain <- rep("overall", times = nrow(results.long))
results.plot <- rbind(results.overall, results.long)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
? facet_wrap()
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
ggsave("Figures/EquiCompl/density_plot.pdf", density.plot,
dpi = 300, scale = 1, width = 10, height = 15, device = cairo_pdf)
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
library(ggrepel)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
length(unique(languages$isocodes)) # number of languages according to iso: 79
length(unique(languages$glottocode)) # number of languages according to glottolog: 79
length(unique(languages$family_id)) # 34
unique(languages$macroarea) # macroareas: 6
# remove Norwegian Nynorsk (nno) since this has NAs in glottolog
languages <- languages[languages$isocodes != "nno", ]
# add 360 to longitudes for languages with longitudes < -25
# (this is necessary to create a Pacific centered map)
languages$longitude[languages$longitude < -25] <-
languages$longitude[languages$longitude < -25] + 360
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.2, 'lines'), force = 1) +
scale_y_continuous(limits = c(-65, 80)) +
#scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.2, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
#scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.5, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2) +
#box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
ggsave("Figures/WorldMap/worldMaps.pdf", family.map,
dpi = 300, scale = 1, width = 8, height = 10, device = cairo_pdf)
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2) +
#box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
ggsave("Figures/WorldMap/worldMaps.pdf", family.map,
dpi = 300, scale = 1, width = 9, height = 10, device = cairo_pdf)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
remove.packages("ggplot2", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggrepel)
detach("package:ggplot2", unload = TRUE)
remove.packages("ggrepel", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("ggrepel")
knitr::opts_chunk$set(echo = TRUE)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
library(readr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(ggrepel)
library(psych)
library(ggcorrplot)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
# remove the parentheses in column names
colnames(gutierrez.results) <- sub("\\(", "", colnames(gutierrez.results))
colnames(gutierrez.results) <- sub("\\)", "", colnames(gutierrez.results))
# replace "+" by "."
colnames(gutierrez.results) <- gsub("\\+", ".", colnames(gutierrez.results))
oh.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Oh/oh.csv")
#TRACK B (Universal Dependencies, UD)
brunato.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez.results), nrow(oh.results))
print(track.a.rows) # this corresponds to the number of languages
track.a.cols <- c(ncol(gutierrez.results)-2, ncol(oh.results)-2)
print(track.a.cols) # this is the number of measures per team
#Track B (should be 63 rows)
track.b.rows <- c(nrow(brunato.results), nrow(coltekin.results),
nrow(semenuks.results), nrow(sinnemaki.results),
nrow(sozinova.results))
print(track.b.rows) # this corresponds to the number of languages
track.b.cols <- c(ncol(brunato.results)-2, ncol(coltekin.results)-2,
ncol(semenuks.results)-2, ncol(sinnemaki.results)-2,
ncol(sozinova.results)-2)
print(track.b.cols) # this is the number of measures per team
track.a <- cbind(gutierrez.results, oh.results[, 3:ncol(oh.results)])
track.b <- cbind(brunato.results, coltekin.results[, 3:ncol(coltekin.results)],
semenuks.results[, 3:ncol(semenuks.results)],
sinnemaki.results[, 3:ncol(sinnemaki.results)],
sozinova.results[, 3:ncol(sozinova.results)])
unique(track.b$language)
