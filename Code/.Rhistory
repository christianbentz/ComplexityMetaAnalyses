c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.p
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a$r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
rownames(cor.results.a.selected.r)
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
typeof(cor.results.a.selected.r)
rownames(cor.results.a.selected.r)
rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
cor.results.a.selected.r
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
# select measures in the matrix of p-values (p)
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.p <- cor.results.a.selected.p[rownames(cor.results.a.selected.p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
correlogram.TrackA <- ggcorrplot(cor.results.a.selected.r, p.mat = cor.results.a.selected.p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
cor.results.a <- corr.test(track.a.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
correlogram.TrackA <- ggcorrplot(cor.results.a$r, p.mat = cor.results.a$p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
X = data[, 1]  # standard normal (mu=0, sd=1)
Y = data[, 2]  # standard normal (mu=0, sd=1)
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]  # standard normal (mu=0, sd=1)
langB = data[, 2]  # standard normal (mu=0, sd=1)
cor(langA, langB)  # yay!
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
cor(langA, langB)
n = 20
r = - 0.8
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB)
# check correlation
cor(langA, langB, method = "Pearson")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB, method = "Pearson")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df, "language", summarise, grp.mean = mean(value, na.rm = T))
library(plyr)
mu <- ddply(simulation.df, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
head(simulation.df)
simulation.df.short <- cbind(langA, langB)
colnames(simulation.df.short) <- c("Language A", "Language B")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
simulation.df.short <- cbind(langA, langB)
colnames(simulation.df.short) <- c("Language A", "Language B")
# long format
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
simulation.df.short
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
# short format
simulation.df.short <- cbind(langA, langB)
# long format
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
simulation.df.long
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
simulation.df.short
head(track.a)
typeof(simulation.df.short)
typeof(track.a)
object(track.a)
simulation.df.short <- data.frame(langA, langB)
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
geom_smooth(method = lm, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("b) Pearson r = - 0.8, Spearman rho = -0.76") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("b) Pearson r = - 0.8, Spearman rho = -0.76") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
ggplot(simulation.df.long, aes(sample = value)) +
stat_qq()
t.test(simulation.df.long$value, simulation.df.long$language, paired = T)
t.test(simulation.df.short$langA, simulation.df.short$langB, paired = T)
?rsnorm()
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:15], langB[15:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
langB
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
langB
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:15], langB[16:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:10], langB[11:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
langB
abs(langB[11:20]*5)
knitr::opts_chunk$set(echo = TRUE)
langA <- c(10,9,8,7,6,5,4,3,2,1)
langB <- c(1,4,9,16,25,36,49,64,81,100)
langA <- scale(langA)
langB <- scale(langB)
n = 100 # number of datapoints
r = -0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
library(MASS)
library(ggplot2)
library(plyr)
n = 100 # number of datapoints
r = -0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langA
?scale()
?rep()
set.seed(1)
# set parameters
n = 10 # number of datapoints
r = -0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 1), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
#langB <- 1/(langB)
langA <- c(langA, rep(1, 10))
langB <- c(rep(1, 10), langB)
langA
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation
langB.lt <- langB*2
# apply non-linear transformation
langB.nt <- sqrt(lang.B)
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation
langB.lt <- langB*2
# apply non-linear transformation
langB.nt <- sqrt(langB)
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(2, 2), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation
langB.lt <- langB*2
# apply non-linear transformation
langB.nt <- sqrt(langB)
langB
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(3, 3), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation
langB.lt <- langB*2
# apply non-linear transformation
langB.nt <- sqrt(langB)
