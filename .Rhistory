#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
annotate(geom = "text", x = 4, y = 22, label = "L1 mean: ",
color="red") +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
annotate(geom = "text", x = 4, y = 22, label = "L1 mean: ") +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = transformation, shape = language)) +
geom_point(alpha = 0.7, size = 3) +
annotate(geom = "text", x = 4, y = 22, label = "L1 mean: ") +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = transformation, shape = language)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = transformation, shape = language)) +
geom_point(alpha = 0.1, size = 3) +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = transformation, shape = language)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
View(combined.df)
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
#geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
geom_smooth(method = loess, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax,
color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
geom_smooth(method = loess, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
geom_smooth(method = lm, alpha = 0.1) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
geom_smooth(method = lm, alpha = 0.7) +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = language, shape = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = transformation, shape = language)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, group = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, group = transformation)) +
geom_point(alpha = 0.7, size = 3, color = language) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, group = transformation,
color = language)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, group = transformation,
shape = language)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.original <- ggplot(combined.df[combined.df$standardization == "non-standardized", ],
aes(x = morphology, y = syntax, group = transformation,
shape = language, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Original Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax")
scatterplot.original
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax, group = transformation,
shape = language, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
#facet_wrap(~ standardization) +
geom_smooth(method = loess, alpha = 0.1) +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = syntax, group = transformation,
shape = language, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
scatterplot.standardized <- ggplot(combined.df[combined.df$standardization == "standardized", ],
aes(x = morphology, y = jitter(syntax), group = transformation,
shape = language, color = transformation)) +
geom_point(alpha = 0.7, size = 3) +
geom_line() +
ggtitle("Standardized Values") +
xlab("Pseudo-Complexity Morphology") +
ylab("Pseudo-Complexity Syntax") +
theme(legend.position = "none")
scatterplot.standardized
grid.arrange(scatterplot.original, scatterplot.standardized, ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
length(unique(languages$isocodes)) # number of languages according to iso: 79
length(unique(languages$glottocode)) # number of languages according to glottolog: 79
unique(languages$macroarea) # macroareas: 6
languages <- languages[languages$isocodes != "nno", ]
head(languages)
world <- map_data("world")
area.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = macroarea),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(aes(label = name), size = 3,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
library(ggrepel)
world <- map_data("world")
area.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = macroarea),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(aes(label = name), size = 3,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
area.map
world <- map_data("world")
area.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = macroarea),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(data = languages, aes(label = name), size = 3,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
area.map
world <- map_data("world")
area.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = macroarea),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 3,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
area.map
world <- map_data("world")
area.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = macroarea),
alpha = 0.9, size = 3, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.5) +
scale_y_continuous(limits = c(-65, 80)) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Area") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "bottom")
area.map
ggsave("Figures/WorldMap/worldMaps.pdf", area.map,
dpi = 300, scale = 1, width = 8, height = 8, device = cairo_pdf)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(ggrepel)
library(psych)
library(ggcorrplot)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
# remove the parentheses in column names
colnames(gutierrez.results) <- sub("\\(", "", colnames(gutierrez.results))
colnames(gutierrez.results) <- sub("\\)", "", colnames(gutierrez.results))
# replace "+" by "."
colnames(gutierrez.results) <- gsub("\\+", ".", colnames(gutierrez.results))
oh.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Oh/oh.csv")
#TRACK B (Universal Dependencies, UD)
brunato.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez.results), nrow(oh.results))
print(track.a.rows) # this corresponds to the number of languages
track.a.cols <- c(ncol(gutierrez.results)-2, ncol(oh.results)-2)
print(track.a.cols) # this is the number of measures per team
#Track B (should be 63 rows)
track.b.rows <- c(nrow(brunato.results), nrow(coltekin.results),
nrow(semenuks.results), nrow(sinnemaki.results),
nrow(sozinova.results))
print(track.b.rows) # this corresponds to the number of languages
track.b.cols <- c(ncol(brunato.results)-2, ncol(coltekin.results)-2,
ncol(semenuks.results)-2, ncol(sinnemaki.results)-2,
ncol(sozinova.results)-2)
print(track.b.cols) # this is the number of measures per team
track.a <- cbind(gutierrez.results, oh.results[, 3:ncol(oh.results)])
track.b <- cbind(brunato.results, coltekin.results[, 3:ncol(coltekin.results)],
semenuks.results[, 3:ncol(semenuks.results)],
sinnemaki.results[, 3:ncol(sinnemaki.results)],
sozinova.results[, 3:ncol(sozinova.results)])
track.a <- track.a[ , -which(names(track.a) %in% c("GM_H1gram", "GM_H3gram", "GM_TTR",
"GM_TTR.H1", "GM_TTR.H3", "GM_TTR.H1.H3",
"GM_TTR.H1_fullyparallelised",
"GM_TTR.H3_fullyparallelised",
"GM_TTR.H1.H3_fullyparallelised"))]
# Remove measures in Track B
track.b <- track.b[ , -which(names(track.b) %in% c("BV_avg_max_depth",
"BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl",
"SI_zero_dl"))]
track.b$CR_inflection_accuracy <- 1-track.b$CR_inflection_accuracy
track.a.scaled <- cbind(track.a[1:2], scale(track.a[3:ncol(track.a)]))
track.b.scaled <- cbind(track.b[1:2], scale(track.b[3:ncol(track.b)]))
track.a.short <- track.a.scaled[, 3:ncol(track.a)]
track.b.short <- track.b.scaled[, 3:ncol(track.b)]
track.a.scatterplot <- ggpairs(track.a.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(track.a.scatterplot)
cor.results.a <- corr.test(track.a.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
correlogram.TrackA <- ggcorrplot(cor.results.a$r, p.mat = cor.results.a$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch")
correlogram.TrackA
cor.results.b <- corr.test(track.b.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch")
correlogram.TrackB
View(track.b.short)
head(track.b.short)
ncol(track.b.short)
col_order <- c("BV_char_per_tok", "CR_inflection_accuracy", "CR_ttr",
"CR_msp", "CR_mfe", "CR_cfe_form_feat", "CR_cfe_feat_form",
"SI_dm", "SI_hm", "SBS_INF", "SBS_DER", "BV_n_tokens",
"BV_verbal_head_per_sent", "BV_verbal_root_perc", "BV_avg_links_len",
"BV_avg_subordinate_chain_len", "BV_subordinate_pre",
"BV_subordinate_post", "BV_avg_verb_edges", "S_idMean", "S_idSD", "SI_dep_dl")
track.b.short.reorder <- track.b.short[, col_order]
track.b.short.reorder
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch")
correlogram.TrackB
log2(6)
log2(1)
1/6*log2(1/6)
-(1/6*log2(1/6))*6
-(2/6*log2(2/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6+1/6*log2(1/6))
-(2/6*log2(2/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6)+1/6*log2(1/6))
-(4/6*log2(4/6)+1/6*log2(1/6)+1/6*log2(1/6))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(MASS)
library(tidyr)
library(ggplot2)
library(ggridges)
library(scales)
library(plyr)
library(rstatix)
brunato.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
meta.info
results <- Reduce(merge, list(brunato.results, coltekin.results, semenuks.results,
sinnemaki.results, sozinova.results))
nrow(results) # i.e. number of different UD corpora
length(unique(results$language)) # i.e. number of different languages
unique(results$language) # output the language names
ncol(results)-2 # i.e. number of complexity measures
results$CR_inflection_accuracy <- 1-results$CR_inflection_accuracy
results.scaled <- cbind(results[1:2], scale(results[3:29]))
results.scaled <- results.scaled[ , -which(names(results.scaled) %in%
c("BV_avg_max_depth","BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl", "SI_zero_dl"))]
results.long <- gather(results.scaled, key = measure, value = value, BV_n_tokens:SBS_DER)
results.long <- results.long[complete.cases(results.long), ]
nrow(results.long)
results.long <- merge(results.long, meta.info[, 1:3], by = "measure")
results.morph <- results.long[results.long$domain == "morphology", ]
results.syntax <- results.long[results.long$domain == "syntax", ]
results.overall <- results.long
results.overall$domain <- rep("overall", times = nrow(results.long))
results.plot <- rbind(results.overall, results.long)
head(results.overall)
head(results.long)
density.plot <- ggplot(results.overall, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_shape = "o", point_size = 1,
size = 0.25, position = position_points_jitter(height = 0.1)) +
#geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
head(results.long)
head(results.morph)
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
head(meta.info)
?wilcox_effsize()
