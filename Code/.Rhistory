coltekin.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez.results), nrow(oh.results))
print(track.a.rows) # this corresponds to the number of languages
track.a.cols <- c(ncol(gutierrez.results)-2, ncol(oh.results)-2)
print(track.a.cols) # this is the number of measures per team
#Track B (should be 63 rows)
track.b.rows <- c(nrow(brunato.results), nrow(coltekin.results),
nrow(semenuks.results), nrow(sinnemaki.results), nrow(sozinova.results))
print(track.b.rows) # this corresponds to the number of languages
track.b.cols <- c(ncol(brunato.results)-2, ncol(coltekin.results)-2,
ncol(semenuks.results)-2, ncol(sinnemaki.results)-2, ncol(sozinova.results)-2)
print(track.b.cols) # this is the number of measures per team
track.a <- cbind(gutierrez.results, oh.results[, 3:ncol(oh.results)])
track.b <- cbind(brunato.results, coltekin.results[, 3:ncol(coltekin.results)],
semenuks.results[, 3:ncol(semenuks.results)],
sinnemaki.results[, 3:ncol(sinnemaki.results)],
sozinova.results[, 3:ncol(sozinova.results)])
track.a <- track.a[ , -which(names(track.a) %in% c("GM_H1gram", "GM_H3gram", "GM_TTR",
"GM_TTR.H1", "GM_TTR.H3", "GM_TTR.H1.H3"))]
# Remove measures in Track B
track.b <- track.b[ , -which(names(track.b) %in% c("SI_double_dl", "SI_head_dl", "SI_zero_dl"))]
track.b$CR_inflection_accuracy <- 1-track.b$CR_inflection_accuracy
cor.results.a <- corr.test(track.a.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
cor.results.a
cor.results.a$r
cor.results.a.selected <- cor.results.a$r[, colnames(cor.results.a$r) == "GM_H1gram_fullyparallelised" |
"GM_H3gram_fullyparallelised" | "GM_TTR_fullyparallelised" |
"O_MC" | "O_WID" | "O_SID"]
cor.results.a.selected <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
correlogram.TrackA <- ggcorrplot(cor.results.a.selected, p.mat = cor.results.a$p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
# select measures in the matrix of p-values (p)
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
correlogram.TrackA <- ggcorrplot(cor.results.a.selected, p.mat = cor.results.a.selected.p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
# select measures in the matrix of p-values (p)
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
correlogram.TrackA <- ggcorrplot(cor.results.a.selected, p.mat = cor.results.a.selected.p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
correlogram.TrackA <- ggcorrplot(cor.results.a.selected.r, p.mat = cor.results.a.selected.p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
cor.results.a <- corr.test(track.a.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
cor.results.a
cor.results.a$r
cor.results.a$p
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID") &
rownames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.p
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a$r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
rownames(cor.results.a.selected.r)
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[, rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r
typeof(cor.results.a.selected.r)
rownames(cor.results.a.selected.r)
rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
cor.results.a.selected.r
cor.results.a.selected.r <- cor.results.a$r[, colnames(cor.results.a$r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.r <- cor.results.a.selected.r[rownames(cor.results.a.selected.r) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
# select measures in the matrix of p-values (p)
cor.results.a.selected.p <- cor.results.a$p[, colnames(cor.results.a$p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID")]
cor.results.a.selected.p <- cor.results.a.selected.p[rownames(cor.results.a.selected.p) %in%
c("GM_H1gram_fullyparallelised", "GM_H3gram_fullyparallelised",
"GM_TTR_fullyparallelised", "O_MC", "O_WID", "O_SID"), ]
correlogram.TrackA <- ggcorrplot(cor.results.a.selected.r, p.mat = cor.results.a.selected.p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
cor.results.a <- corr.test(track.a.short, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
correlogram.TrackA <- ggcorrplot(cor.results.a$r, p.mat = cor.results.a$p, type = "lower",
outline.col = "white", colors = c("#AE3C3C", "white", "#3C77AE"),
lab = T, insig = "pch")
correlogram.TrackA
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
X = data[, 1]  # standard normal (mu=0, sd=1)
Y = data[, 2]  # standard normal (mu=0, sd=1)
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]  # standard normal (mu=0, sd=1)
langB = data[, 2]  # standard normal (mu=0, sd=1)
cor(langA, langB)  # yay!
samples = 20
r = - 0.8
data = mvrnorm(n = samples, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
cor(langA, langB)
n = 20
r = - 0.8
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB)
# check correlation
cor(langA, langB, method = "Pearson")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB, method = "Pearson")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlation
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df, "language", summarise, grp.mean = mean(value, na.rm = T))
library(plyr)
mu <- ddply(simulation.df, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
head(simulation.df)
simulation.df.short <- cbind(langA, langB)
colnames(simulation.df.short) <- c("Language A", "Language B")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
simulation.df.short <- cbind(langA, langB)
colnames(simulation.df.short) <- c("Language A", "Language B")
# long format
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
simulation.df.short
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data = mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA = data[, 1]
langB = data[, 2]
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
# short format
simulation.df.short <- cbind(langA, langB)
# long format
value <- c(langA, langB)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-3, 3) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
simulation.df.long
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
simulation.df.short
head(track.a)
typeof(simulation.df.short)
typeof(track.a)
object(track.a)
simulation.df.short <- data.frame(langA, langB)
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = LangB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
geom_smooth(method = lm, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("a) High Positive Correlation Track A (r = 0.81)") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("b) Pearson r = - 0.8, Spearman rho = -0.76") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
scatterplot <- ggplot(simulation.df.short, aes(x = langA, y = langB)) +
geom_point(alpha = 0.3) +
geom_smooth(method = loess, alpha = 0.3) +
#geom_smooth(method = lm, alpha = 0.3) +
ggtitle("b) Pearson r = - 0.8, Spearman rho = -0.76") +
xlab("Complexity Value (Language A)") +
ylab("Complexity Value (Language B)") +
theme(legend.position = "none")
scatterplot
ggplot(simulation.df.long, aes(sample = value)) +
stat_qq()
t.test(simulation.df.long$value, simulation.df.long$language, paired = T)
t.test(simulation.df.short$langA, simulation.df.short$langB, paired = T)
?rsnorm()
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:15], langB[15:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
langB
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
langB
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:15], langB[16:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = - 0.8 # predefined correlation
# generate the data
data <- mvrnorm(n = n, mu = c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply non-linear transformation
langB <- c(langB[1:10], langB[11:20]*10)
# check correlations
cor(langA, langB, method = "pearson")
cor(langA, langB, method = "spearman")
langB
abs(langB[11:20]*5)
