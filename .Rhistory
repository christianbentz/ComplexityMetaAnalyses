install.packages("Hmisc")
knitr::opts_chunk$set(echo = TRUE)
gutierrez <- read.csv("https://github.com/IWMLC/language-complexity-metrics/tree/master/PBCtrack/Gutierrez/Gutierrez.csv")
head(gutierrez)
install.packages("RCurl")
library(RCurl)
gutierrez.url <- getURL("https://github.com/IWMLC/language-complexity-metrics/tree/master/PBCtrack/Gutierrez/Gutierrez.csv")
gutierrez <- read.csv(text = gutierrez.url)
head(gutierrez)
gutierrez.url <- getURL("https://github.com/IWMLC/language-complexity-metrics/blob/master/PBCtrack/Gutierrez/Gutierrez.csv")
gutierrez.url
knitr::opts_chunk$set(echo = TRUE)
gutierrez <- read.csv("~/Data/IWMLC2019/shared_task/track_A/gutierrez/Gutierrez.csv")
gutierrez <- read.csv("/Data/IWMLC2019/shared_task/track_A/gutierrez/Gutierrez.csv")
file.choose()
gutierrez <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Gutierrez/Gutierrez.csv")
head(gutierrez)
file.choose()
oh <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Oh/oh.csv")
file.choose()
brunato <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
file.choose()
file.choose()
gutierrez <- read.csv("~/Data/PBCtrack/Gutierrez/Gutierrez.csv")
gutierrez <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Gutierrez/Gutierrez.csv")
oh <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Oh/oh.csv")
file.choose()
file.choose()
gutierrez <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Gutierrez/Gutierrez.csv")
oh <- read.csv("~/Github/ComplexityMetaAnalyses/Data/PBCtrack/Oh/oh.csv")
#TRACK B
brunato <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Coltekin_rama/coltekin.csv")
semenuks <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Semenuks/Semenuks.csv")
sinnemaki <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova <- read.csv("~/Github/ComplexityMetaAnalyses/Data/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez), nrow(oh))
print(track.a.rows)
track.a.cols <- c(ncol(gutierrez), ncol(oh))
print(track.a.cols)
track.b.rows <- c(nrow(brunato), nrow(coltekin), nrow(semenuks), nrow(sinnemaki), nrow(sozinova))
print(track.b.rows)
track.b.cols <- c(ncol(brunato), ncol(coltekin), ncol(semenuks), ncol(sinnemaki), ncol(sozinova))
print(track.b.cols)
track.a <- cbind(gutierrez, oh[, 3:ncol(oh)])
track.b <- cbind(brunato, coltekin[, 3:ncol(coltekin)], semenuks[, 3:ncol(semenuks)], sinnemaki[, 3:ncol(sinnemaki)], sozinova[, 3:ncol(sozinova)])
head(track.a)
head(track.b)
View(track.a)
track.a.short <- track.a[, 3:ncol(track.a)]
track.a.plot <- ggpairs(track.a.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3, lwd = 0.5, size = 2)),
upper = list(continuous = wrap('cor', method = "spearman")),
columns = c("GM_H1gram", "GM_H3gram", "GM_TTR",
"O_MC", "O_WID", "O_SID")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(GGally)
track.a.plot <- ggpairs(track.a.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3, lwd = 0.5, size = 2)),
upper = list(continuous = wrap('cor', method = "spearman")),
columns = c("GM_H1gram", "GM_H3gram", "GM_TTR",
"O_MC", "O_WID", "O_SID")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(track.a.plot)
ggsave("/Github/ComplexityMetaAnalyses/Figures/TrackA/track_a_plot.pdf", track.a.plot, dpi = 300, scale = 1, width = 10, height = 10, device = cairo_pdf)
ggsave("~/Github/ComplexityMetaAnalyses/Figures/TrackA/track_a_plot.pdf", track.a.plot, dpi = 300, scale = 1, width = 10, height = 10, device = cairo_pdf)
track.b.short <- track.b[, 3:ncol(track.b)]
track.b.plot <- ggpairs(track.b.short, progress = TRUE,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3, lwd = 0.5, size = 2)),
upper = list(continuous = wrap('cor', method = "spearman")),
columns = c("BV_n_tokens", "BV_char_per_tok", "BV_avg_links_len",
"BV_avg_max_depth", "CR_inflection_accuracy", "CR_ttr", "S_idMean", "S_idSD",
"SI_dm", "SI_hm", "SI_dep_dl", "SBS_INF", "SBS_DER")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(track.b.plot)
ggsave("~/Github/ComplexityMetaAnalyses/Figures/TrackB/track_b_plot.pdf", track.b.plot, dpi = 300, scale = 1, width = 20, height = 20, device = cairo_pdf)
track.a.matrix <- as.matrix(track.a.short)
#apply the rcorr function to this matrix to get matrices of Spearman correlations and uncorrected p-values
track.a.cor <- rcorr(track.a.matrix, type = "spearman")$r
library(Hmisc)
install.packages("Hmisc")
install.packages("latticeExtra")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(plyr)
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
a = 2 # constant for linear transformation
# generate the data
data <- mvrnorm(n = n, mu = c(3, 3), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation to language B measures
langB.lt <- langB*a
# apply non-linear transformation to language B measures
langB.nt <- sqrt(langB)
langA.stand <- scale(langA)
langB.stand <- scale(langB)
langB.lt.stand <- scale(langB.lt)
langB.nt.stand <- scale(langB.nt)
simulation.df.short <- data.frame(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
simulation.scatterplot <- ggpairs(simulation.df.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(GGally)
simulation.scatterplot <- ggpairs(simulation.df.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot)
simulation.scatterplot <- ggpairs(simulation.df.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot)
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
a = 2 # constant for linear transformation
# generate the data
data <- mvrnorm(n = n, mu = c(3, 3), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation to language B measures
langB.lt <- langB*a
# apply non-linear transformation to language B measures
langB.nt <- sqrt(langB)
langA.stand <- scale(langA)
langB.stand <- scale(langB)
langB.lt.stand <- scale(langB.lt)
langB.nt.stand <- scale(langB.nt)
simulation.df.short <- data.frame(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
# long format
value <- c(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
measurement <- rep(c(1:n), times = 2)
language <- c(rep("Language A", times = n), rep("Language B", times = n))
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df.long)
head(simulation.df.long)
simulation.df.short <- data.frame(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
value <- c(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
value
measurement <- rep(c(1:n), times = 8)
measurement
language <- c(rep("Language A", times = n),
rep("Language B", times = n),
rep("Language A (standardized)", times = n),
rep("Language B (standardized)", times = n),
rep("Language B (linear trans.)", times = n),
rep("Language B (linear trans., standardized)", times = n),
rep("Language B (non-linear trans.)", times = n),
rep("Language B (non-linear trans., standardized)", times = n),
)
language <- c(rep("Language A", times = n),
rep("Language B", times = n))
value <- c(langA, langB, langA.stand, langB.stand, langB.lt,
langB.lt.stand, langB.nt, langB.nt.stand)
measurement <- rep(c(1:n), times = 8)
language <- c(rep("Language A", times = n),
rep("Language B", times = n),
rep("Language A (standardized)", times = n),
rep("Language B (standardized)", times = n),
rep("Language B (linear trans.)", times = n),
rep("Language B (linear trans., standardized)", times = n),
rep("Language B (non-linear trans.)", times = n),
rep("Language B (non-linear trans., standardized)", times = n)
)
simulation.df.long <- data.frame(language, measurement, value)
head(simulation.df.long)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-3, 3) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-3, 3) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-3, 3) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-3, 3) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.03, width = 0) + # add some jitter to prevent overplotting
geom_vline(aes(xintercept = 0), color = "darkgrey") +
geom_vline(data = med, aes(xintercept = grp.median), linetype = "dashed") +
facet_wrap(~ language) +
#xlim(-3, 3) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
set.seed(1)
# set parameters
n = 20 # number of datapoints
r = -0.7 # predefined correlation
a = 2 # constant for linear transformation
# generate the data
data <- mvrnorm(n = n, mu = c(3, 3), Sigma = matrix(c(1, r, r, 1), nrow = 2),
empirical = TRUE)
langA <- data[, 1]
langB <- data[, 2]
# apply linear transformation to language B measures
langB.lt <- langB*a
# apply non-linear transformation to language B measures
langB.nt <- sqrt(langB)
langA.stand <- scale(langA)
langB.stand <- scale(langB)
langB.lt.stand <- scale(langB.lt)
langB.nt.stand <- scale(langB.nt)
simulation.df.short <- data.frame(langA, langB, langB.lt, langB.nt)
simulation.df.short.stand <- data.frame(langA.stand, langB.stand,
langB.lt.stand, langB.nt.stand)
simulation.scatterplot <- ggpairs(simulation.df.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot)
# standardized
simulation.scatterplot <- ggpairs(simulation.df.short.stand,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot)
simulation.scatterplot <- ggpairs(simulation.df.short,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot)
# standardized
simulation.scatterplot.stand <- ggpairs(simulation.df.short.stand,
lower = list(continuous = wrap("smooth_loess", alpha = 0.3,
lwd = 0.5, size = 2))) +
#upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(simulation.scatterplot.stand)
knitr::opts_chunk$set(echo = TRUE)
language = c("L1", "L2", "L3", "L4", "L5")
m <- c(1, 2, 3, 4, 5)
s <- c(5, 4, 3, 2, 1)
example.df <- data.frame(language, m, s)
print(example.df)
plot(example.df$m, example.df$s, xlab = "morphological complexity (m)",
ylab = "syntactic complexity (s)")
text(example.df$m, example.df$s, labels = example.df$language, cex = 0.7, pos = 4)
knitr::opts_chunk$set(echo = TRUE)
language = c("L1", "L2", "L3", "L4", "L5")
m <- c(1, 2, 3, 4, 5)
m_prime <- 1/m
s <- c(5, 4, 3, 2, 1)
example.df <- data.frame(language, m, s)
print(example.df)
language = c("L1", "L2", "L3", "L4", "L5")
m <- c(1, 2, 3, 4, 5)
m_prime <- 1/m
s <- c(5, 4, 3, 2, 1)
example.df <- data.frame(language, m, m_prime, s)
print(example.df)
scale(example.df$s_prime)
example.df
language = c("L1", "L2", "L3", "L4", "L5")
m <- c(1, 2, 3, 4, 5)
s_prime <- 5 + m*-0.5
example.df <- data.frame(language, m, s, s_prime)
print(example.df)
scale(example.df$s_prime)
language = c("L1", "L2", "L3", "L4", "L5")
m <- c(1, 2, 3, 4, 5)
s <- 5 + -1*m
example.df <- data.frame(language, m, s)
print(example.df)
scale(example.df$s)
m
inverse.gaussian(m)
inv(m)
inverse(m)
s <- sort(m, decreasing = T)
s
s_prime <- scale(s)
s_prime
s <- sort(m, decreasing = T)
s
s_prime <- s^2
s_prime
scale(s_prime)
4.5+4+3.5+3+2.5
17.5/5
