results.plot <- rbind(results.overall, results.long)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
? facet_wrap()
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
density.plot <- ggplot(results.plot, aes(x = value, y = domain, fill = domain)) +
geom_vline(aes(xintercept = 0), color = "darkgrey") +
stat_density_ridges(quantile_lines = TRUE, quantiles = 0.5,
rel_min_height = 0.01, scale = 0.6, alpha = 0.5,
jittered_points = TRUE, point_size = 0.5,
size = 0.25, position = position_points_jitter(height = 0.1)) +
facet_wrap(~ language, ncol = 5) +
xlim(-5, 5) +
labs(x = "Complexity Value", y = "Density") +
theme_bw() +
theme(legend.position = "none")
print(density.plot)
ggsave("Figures/EquiCompl/density_plot.pdf", density.plot,
dpi = 300, scale = 1, width = 10, height = 15, device = cairo_pdf)
library(readr)
library(ggmap)
library(maps)
library(gridExtra)
library(ggrepel)
languages <- as.data.frame(read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/languages_metaInfo.csv"))
length(unique(languages$isocodes)) # number of languages according to iso: 79
length(unique(languages$glottocode)) # number of languages according to glottolog: 79
length(unique(languages$family_id)) # 34
unique(languages$macroarea) # macroareas: 6
# remove Norwegian Nynorsk (nno) since this has NAs in glottolog
languages <- languages[languages$isocodes != "nno", ]
# add 360 to longitudes for languages with longitudes < -25
# (this is necessary to create a Pacific centered map)
languages$longitude[languages$longitude < -25] <-
languages$longitude[languages$longitude < -25] + 360
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.2, 'lines'), force = 1) +
scale_y_continuous(limits = c(-65, 80)) +
#scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.2, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
#scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.5, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.1) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2,
box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2) +
#box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
ggsave("Figures/WorldMap/worldMaps.pdf", family.map,
dpi = 300, scale = 1, width = 8, height = 10, device = cairo_pdf)
world <- map_data("world", wrap = c(-25, 335))
family.map <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group),
fill = "white", colour = "darkgrey") +
geom_point(data = languages, aes(x = longitude, y = latitude,
fill = family_id),
alpha = 0.9, size = 2.5, pch = 21) +
geom_text_repel(data = languages, aes(x = longitude, y = latitude,
label = name), size = 2) +
#box.padding = unit(0.1, 'lines'), force = 0.2) +
scale_y_continuous(limits = c(-65, 80)) +
labs(x = "longitude", y = "latitude", fill = "Language Family") +
theme_bw() +
facet_wrap (~ corpus, nrow = 2) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
title = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "bottom")
family.map
ggsave("Figures/WorldMap/worldMaps.pdf", family.map,
dpi = 300, scale = 1, width = 9, height = 10, device = cairo_pdf)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
remove.packages("ggplot2", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggrepel)
detach("package:ggplot2", unload = TRUE)
remove.packages("ggrepel", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("ggrepel")
knitr::opts_chunk$set(echo = TRUE)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
library(readr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(ggrepel)
library(psych)
library(ggcorrplot)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
# remove the parentheses in column names
colnames(gutierrez.results) <- sub("\\(", "", colnames(gutierrez.results))
colnames(gutierrez.results) <- sub("\\)", "", colnames(gutierrez.results))
# replace "+" by "."
colnames(gutierrez.results) <- gsub("\\+", ".", colnames(gutierrez.results))
oh.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Oh/oh.csv")
#TRACK B (Universal Dependencies, UD)
brunato.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez.results), nrow(oh.results))
print(track.a.rows) # this corresponds to the number of languages
track.a.cols <- c(ncol(gutierrez.results)-2, ncol(oh.results)-2)
print(track.a.cols) # this is the number of measures per team
#Track B (should be 63 rows)
track.b.rows <- c(nrow(brunato.results), nrow(coltekin.results),
nrow(semenuks.results), nrow(sinnemaki.results),
nrow(sozinova.results))
print(track.b.rows) # this corresponds to the number of languages
track.b.cols <- c(ncol(brunato.results)-2, ncol(coltekin.results)-2,
ncol(semenuks.results)-2, ncol(sinnemaki.results)-2,
ncol(sozinova.results)-2)
print(track.b.cols) # this is the number of measures per team
track.a <- cbind(gutierrez.results, oh.results[, 3:ncol(oh.results)])
track.b <- cbind(brunato.results, coltekin.results[, 3:ncol(coltekin.results)],
semenuks.results[, 3:ncol(semenuks.results)],
sinnemaki.results[, 3:ncol(sinnemaki.results)],
sozinova.results[, 3:ncol(sozinova.results)])
unique(track.b$language)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(ggrepel)
library(psych)
library(ggcorrplot)
gutierrez.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Gutierrez/Gutierrez.csv")
# remove the parentheses in column names
colnames(gutierrez.results) <- sub("\\(", "", colnames(gutierrez.results))
colnames(gutierrez.results) <- sub("\\)", "", colnames(gutierrez.results))
# replace "+" by "."
colnames(gutierrez.results) <- gsub("\\+", ".", colnames(gutierrez.results))
oh.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/PBCtrack/Oh/oh.csv")
#TRACK B (Universal Dependencies, UD)
brunato.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
track.a.rows <- c(nrow(gutierrez.results), nrow(oh.results))
print(track.a.rows) # this corresponds to the number of languages
track.a.cols <- c(ncol(gutierrez.results)-2, ncol(oh.results)-2)
print(track.a.cols) # this is the number of measures per team
#Track B (should be 63 rows)
track.b.rows <- c(nrow(brunato.results), nrow(coltekin.results),
nrow(semenuks.results), nrow(sinnemaki.results),
nrow(sozinova.results))
print(track.b.rows) # this corresponds to the number of languages
track.b.cols <- c(ncol(brunato.results)-2, ncol(coltekin.results)-2,
ncol(semenuks.results)-2, ncol(sinnemaki.results)-2,
ncol(sozinova.results)-2)
print(track.b.cols) # this is the number of measures per team
track.a <- cbind(gutierrez.results, oh.results[, 3:ncol(oh.results)])
track.b <- cbind(brunato.results, coltekin.results[, 3:ncol(coltekin.results)],
semenuks.results[, 3:ncol(semenuks.results)],
sinnemaki.results[, 3:ncol(sinnemaki.results)],
sozinova.results[, 3:ncol(sozinova.results)])
track.a <- track.a[ , -which(names(track.a) %in% c("GM_H1gram", "GM_H3gram", "GM_TTR",
"GM_TTR.H1", "GM_TTR.H3", "GM_TTR.H1.H3",
"GM_TTR.H1_fullyparallelised",
"GM_TTR.H3_fullyparallelised",
"GM_TTR.H1.H3_fullyparallelised"))]
# Remove measures in Track B
track.b <- track.b[ , -which(names(track.b) %in% c("BV_avg_max_depth",
"BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl",
"SI_zero_dl"))]
track.b$CR_inflection_accuracy <- 1-track.b$CR_inflection_accuracy
track.a.scaled <- cbind(track.a[1:2], scale(track.a[3:ncol(track.a)]))
track.b.scaled <- cbind(track.b[1:2], scale(track.b[3:ncol(track.b)]))
selection.IE <- c("Afrikaans", "Bulgarian", "Catalan", "Czech", "Old Church Slavonic",
"Danish", "German", "Greek", "English", "Persian",
"French", "Gothic", "Ancient Greek", "Hindi", "Croatian", "Italian",
"Latin", "Latvian", "Dutch", "Norwegian", "Polish", "Portuguese",
"Romanian", "Russian", "Slovak", "Slovenian", "Spanish", "Serbian",
"Swedish", "Ukrainian", "Urdu")
track.b.scaled.IE <- track.b.scaled[track.b.scaled$language %in% selection.IE, ]
# select non-Indo-European languages
selection.nonIE <- c("Arabic", "Chinese", "Estonian", "Basque", "Finnish", "Hebrew",
"Hungarian", "Indonesian", "Japanese", "Korean", "Turkish",
"Uyghur", "Vietnamese")
track.b.scaled.nonIE <- track.b.scaled[track.b.scaled$language %in% selection.nonIE, ]
track.a.short <- track.a.scaled[, 3:ncol(track.a)]
track.b.short <- track.b.scaled[, 3:ncol(track.b)]
track.b.IE.short <- track.b.scaled.IE[, 3:ncol(track.b)]
track.b.nonIE.short <- track.b.scaled.nonIE[, 3:ncol(track.b)]
head(track.b.short)
head(track.b)
a <- c(rep("green", 11), rep("black", 17))
a
col <- c(rep("green", 11), rep("black", 17))
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = col))
correlogram.TrackB
col <- c(rep("green", 11), rep("black", 17))
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_hline(yintercept = 5)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = col))
correlogram.TrackB
col <- c(rep("green", 11), rep("black", 17))
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_hline(yintercept = 11.5)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = col))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_hline(yintercept = 11.5) +
geom_vline(yintercept = 11.5)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = col))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_hline(yintercept = 11.5) +
geom_vline(xintercept = 11.5)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = col))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0, xend = 11.5, yend = 11.5)) +
geom_segment(aes(x = 11.5, y = 11.5, xend = 22.5, yend = 11.5)) +
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0, xend = 11.5, yend = 11.5)) +
geom_segment(aes(x = 11.5, y = 11.5, xend = 22, yend = 11.5)) +
correlogram.TrackB
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0, xend = 11.5, yend = 11.5))
#geom_segment(aes(x = 11.5, y = 11.5, xend = 22, yend = 11.5)) +
correlogram.TrackB
cor.results.b <- corr.test(track.b.short.reorder, method = "spearman",
use = "pairwise.complete.obs", adjust = "holm")
# produce correlogram
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0.5, xend = 11.5, yend = 11.5))
#geom_segment(aes(x = 11.5, y = 11.5, xend = 22, yend = 11.5)) +
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0.5, xend = 11.5, yend = 11.5))
geom_segment(aes(x = 11.5, y = 11.5, xend = 22, yend = 11.5)) +
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0.5, xend = 11.5, yend = 11.5)) +
geom_segment(aes(x = 11.5, y = 11.5, xend = 22, yend = 11.5))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 11.5, y = 0.5, xend = 11.5, yend = 11.5)) +
geom_segment(aes(x = 11.5, y = 11.5, xend = 21.5, yend = 11.5))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 10.5, y = 0.5, xend = 10.5, yend = 11.5)) +
geom_segment(aes(x = 11.5, y = 11.5, xend = 21.5, yend = 11.5))
correlogram.TrackB
correlogram.TrackB <- ggcorrplot(cor.results.b$r, p.mat = cor.results.b$p, type = "lower",
outline.col = "white", colors = c("#3C77AE", "white", "#AE3C3C"),
lab = T, insig = "pch") +
geom_segment(aes(x = 10.5, y = 0.5, xend = 10.5, yend = 10.5)) +
geom_segment(aes(x = 10.5, y = 10.5, xend = 21.5, yend = 10.5))
correlogram.TrackB
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(MASS)
library(tidyr)
library(ggplot2)
library(ggridges)
library(scales)
library(plyr)
library(rstatix)
brunato.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Brunato_venturi/Brunato-Venturi.csv")
coltekin.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Coltekin_rama/coltekin.csv")
semenuks.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Semenuks/Semenuks.csv")
sinnemaki.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sinnemaki/Sinnemaki.csv")
sozinova.results  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/UDtrack/Sozinova_etal/sozinova_etal.csv")
meta.info  <- read_csv("https://raw.githubusercontent.com/IWMLC/language-complexity-metrics/master/measures_metaInfo.csv")
results <- Reduce(merge, list(brunato.results, coltekin.results, semenuks.results,
sinnemaki.results, sozinova.results))
nrow(results) # i.e. number of different UD corpora
length(unique(results$language)) # i.e. number of different languages
unique(results$language) # output the language names
ncol(results)-2 # i.e. number of complexity measures
head(results)
results$CR_inflection_accuracy <- 1-results$CR_inflection_accuracy
results.scaled <- cbind(results[1:2], scale(results[3:29]))
results.scaled <- results.scaled[ , -which(names(results.scaled) %in%
c("BV_avg_max_depth","BV_avg_token_per_clause",
"SI_double_dl", "SI_head_dl", "SI_zero_dl"))]
nrow(results.scaled)
results.long <- gather(results.scaled, key = measure, value = value, BV_n_tokens:SBS_DER)
results.long <- results.long[complete.cases(results.long), ]
nrow(results.long)
head(results.scaled)
?pairwise.wilcox.test()
p.values <- pairwise.wilcox.test(jitter(results.long$value), results.long$language,
paired = F, p.adjust.method = "holm")
pairwise.wilcox.test(jitter(results.long$value), results.long$language,
+                      paired = F, p.adjust.method = "holm")
pairwise.wilcox.test(jitter(results.long$value), results.long$language, paired = F, p.adjust.method = "holm")
vec1= c(-3,-2,-1,1,2,3)
vec2=c(-1,0,1,3,4,5)
wilcox.test(vec1,vec2)
summary(wilcox.test(vec1,vec2))
wilcox.test(vec1,vec2, paired = F)
